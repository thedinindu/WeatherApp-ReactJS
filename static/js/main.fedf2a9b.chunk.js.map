{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","style","textAlign","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","placeholder","autoComplete","color","borderRadius","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","Math","floor","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeID","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fedf2a9b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Weather = (props) => {\n    return (\n        <div className=\"container text-light\">\n            <div className=\"cards pt-5\">\n                <h1>{props.city}</h1>\n                <h5 className=\"py-4\">\n                    <i className={`wi ${props.weatherIcon} display-1`}></i>\n                </h5>\n                \n                {props.temp_celsius ? <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1> : null}\n\n                {minmaxTemp(props.temp_min, props.temp_max)}\n\n                <h4 className=\"py-3\">{props.description}</h4>\n            </div>\n        </div>\n    )\n}\n\nfunction minmaxTemp(min, max){\n    if(min && max){\n        return(\n\n            <div style={{textAlign: 'center'}}>\n                <h6>\n                    <span className='px-4'>min</span>\n                    <span className='px-4'>max</span>\n                </h6>\n\n                <h3>\n                    <span className='px-4'>{min}&deg;</span>\n                    <span className='px-4'>{max}&deg;</span>\n                </h3>\n            </div>\n            \n            \n        )\n    } \n}\n\nexport default Weather"," import React from 'react'\n import \"./form.style.css\"\n\nconst Form = props => {\n    return (\n        <div className=\"container\">\n            <div>{props.error ? error(): null}</div>\n            <h1 className=\"mt-5\">Weather App</h1>\n            <form onSubmit={props.loadweather}>\n                <div className=\"row\">\n                    <div className=\"col-md-3 offset-md-2 py-2\">\n                        <input type=\"text\" className=\"form-control\" name=\"city\" placeholder=\"City\" autoComplete=\"off\" style={{color: 'white'}} />\n                    </div>\n\n                    <div className=\"col-md-3 py-2\">\n                        <input type=\"text\" className=\"form-control\" name=\"country\" placeholder=\"Country\" autoComplete=\"off\" style={{color: 'white'}} />\n                    </div>\n\n                    <div className=\"col-md-3 mt-md-0 text-md-left py-2\">\n                        <button className=\"btn btn-success\" style={{borderRadius: 0}}>Get Weather</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nfunction error() {\n    return(\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\n            Please Enter City and Country\n        </div>\n    )\n}\n\n export default Form ","import React from 'react';\nimport './App.css';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"weather-icons/css/weather-icons.css\"\nimport Weather from './app_component/weather.component'\nimport Form from './app_component/form.component'\n\nconst API_KEY = \"da4f7caa098d66b16c99610b266bad02\"\n\n// api.openweathermap.org/data/2.5/weather?q=London\n\nclass App extends React.Component {\n  \n  constructor() {\n    super()\n    this.state={\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min:undefined,\n      description: \"\",\n      error: false\n    }\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  get_WeatherIcon(icons, rangeID) {\n    switch(true){\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({icon: this.weatherIcon.Thunderstorm})\n        break\n\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({icon: this.weatherIcon.Drizzle})\n        break\n\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({icon: this.weatherIcon.Rain})\n        break\n\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({icon: this.weatherIcon.Snow})\n        break\n\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({icon: this.weatherIcon.Atmosphere})\n        break\n\n      case rangeID === 800:\n        this.setState({icon: this.weatherIcon.Clear})\n        break\n\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({icon: this.weatherIcon.Clouds})\n        break\n\n      default:\n        this.setState({icon: this.weatherIcon.Clouds})\n    }\n  } \n\n  getWeather = async(e) => {\n    e.preventDefault()\n    const city = e.target.elements.city.value\n    const country = e.target.elements.country.value\n\n    if(city && country){\n      const api_call = await fetch (`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\n\n        const response = await api_call.json()\n        console.log(response)\n\n        this.setState({\n          city:`${response.name}, ${response.sys.country}`,\n          country: response.sys.country,\n          celsius: Math.floor(response.main.temp),\n          temp_max: Math.floor(response.main.temp_max),\n          temp_min: Math.floor(response.main.temp_min),\n          description: response.weather[0].description,\n          error: false\n        })\n\n        this.get_WeatherIcon(this.weatherIcon, response.weather[0].id)\n      }else{\n        this.setState({error: true})\n      }\n    }\n\n    \n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeather} error={this.state.error} />\n        <Weather \n          city={this.state.city}\n          country={this.state.country}\n          temp_celsius={this.state.celsius}\n          temp_max={this.state.temp_max}\n          temp_min={this.state.temp_min}\n          description={this.state.description}\n          weatherIcon={this.state.icon}\n          />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}